from datetime import datetime, date, timedelta
from django.utils import timezone
from django.contrib.auth.models import AbstractUser,Group
from django.db import models
from django.contrib.auth.hashers import make_password
from libs.constants import constants_others


class CustomUser(AbstractUser):
    """
    This model instance extends the Django user model instance, which means you can add
    extra fields you as suits your requirement to the User instance.

    Remember to run makemigrations and migrate for the app(app_enrollment) if you want to
    keep using this customuser against the default django user
    """
    group = models.ForeignKey(Group, on_delete=models.CASCADE, blank=True, null=True)
    unique_id = models.CharField(max_length=50)
    username = models.CharField(null=True, blank=True, max_length=50)
    state = models.CharField(max_length=50)
    gender = models.CharField(max_length=20, choices=constants_others.Gender)
    email = models.EmailField(unique=True)

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ['first_name', 'last_name', 'username', 'state', 'gender']

    def save(self, *args, **kwargs):
        """
        This will generate unique_id for every user that gets registered.
        It will concatenate the selected state with the id

        The unique ID is generated by concatenating
        - the first 3 character of the chosen state
        - the first 3 character of the users firstname
        - the first 3 character of the users lastname
        - the multiplication of the length of the lastname and the firstname

        we are using make_password() method to has users password so the are not saved
        as raw text in the database
        """
        # self.plan_expire = self.date_registered + self.duration
        unique_number = len(self.first_name) * len(self.last_name)
        self.unique_id = f'{self.state[:3]}{self.gender[0]}{self.first_name[:2]}{self.last_name[-2:]}{unique_number}'
        if self.is_staff:
            self.password = self.password
        elif not self.is_staff:
            self.password = make_password(self.password)
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.username}"

    # def is_expired(self):
    #     if self.plan_expired is None:
    #         return False
    #     else:
    #         return self.expire < date.today()


    def days_left(self):
        if self.plan_expired is None:
            return None
        else:
            return(self.plan_expired - date.today()).days


    def activate(self):
        if not self.active:
            self.active = True
            self.save()

    def deactivate(self):
        if self.active:
            self.active = False
            self.save()





class Staff(CustomUser):
    """
    This model instance is used to create users in the database who will be given different
    permission to perform various task
    """
    phone_number = models.PositiveIntegerField()
    department = models.ForeignKey("Department", null=True, on_delete=models.DO_NOTHING)
    office_name = models.CharField(max_length=250, blank=True, null=True)
    address = models.TextField(blank=True, null=True)

    class Meta:
        ordering = ['-id']

    def __str__(self):
        return f'{self.first_name} {self.last_name}'



class Department(models.Model):
    """
    This model instance is used to add new departments which gets added to the staff instance
    """
    name = models.TextField(primary_key=True, null=False, default=None)


    class Meta:
        ordering = ['-name']

    def __str__(self):
        return self.name


class GenericPlan(models.Model):
    """
    This models instance will hold all the plans that will be added to the database.
    the json field is to be processed and allow data to be posted into it in a json format.

    When a new field is created via the UI, all the fields that are not predefined here will
    be processed and saved as a json inside the json field which is intended to make this
    model instance dynamic and flexible
    """
    plan_name = models.CharField(max_length=200)
    price = models.PositiveIntegerField()
    short_description = models.CharField(max_length=250)
    date_created = models.DateField(default=timezone.now)

    class Meta:
        ordering = ['-id']

    def __str__(self):
        return self.plan_name



class PlanRegistration(CustomUser):
    """
    This model instance is used to register users unto a particular plan
    """
    plan_name = models.CharField(max_length=50)
    image = models.ImageField(upload_to="user-profile-picture", null=True, blank=True)
    expired = models.DateTimeField()
    date_registered = models.DateTimeField(default=timezone.now)
    json = models.TextField()
    
    three_month_reminder_sent = models.BooleanField(default=False)
    is_due_reminder_sent = models.BooleanField(default=False)

    is_expired = models.BooleanField(default=False)


    def save(self, *args, **kwargs):
        """
        This will calculate the expiration date of a plan once a user signs up
        and saves it in the expired field
        """
        self.expired = datetime.now() + timedelta(365)
        super().save(*args, **kwargs)
        

    class Meta:
        ordering = ['-id']

    def __str__(self):
        return self.plan_name


class Dependent(models.Model):
    """
    This model instance is intended to be used to add dependent to users who sign up to a plan
    """
    # Basic informations
    enrollee_id = models.AutoField(primary_key=True)
    user = models.ForeignKey(PlanRegistration, on_delete=models.CASCADE)
    first_name = models.CharField(max_length=20, null=False)
    last_name = models.CharField(max_length=20, null=False)
    middle_name = models.CharField(max_length=50, null=True, blank=True)
    email = models.EmailField(null=True, unique=True)
    phone = models.PositiveIntegerField(default=None)
    date_of_birth = models.DateField()
    marital_status = models.CharField(max_length=20, choices=constants_others.MaritalStatus)
    gender = models.CharField(max_length=20, choices=constants_others.Gender)
    nationality = models.CharField(max_length=50)
    national_identity_number = models.CharField(max_length=50)
    state = models.CharField(max_length=25)
    lga = models.CharField(max_length=35, verbose_name='local_government')
    state_of_residence = models.CharField(max_length=50)

    # For their medical history
    genotype = models.CharField(max_length=3, choices=constants_others.Genotype)
    blood_group = models.CharField(max_length=10, choices=constants_others.BloodGroup)
    disability = models.CharField(max_length=50, choices=constants_others.Disability)
    allergies = models.CharField(max_length=50)
    chronic_condition = models.CharField(max_length=50)

    # Next of Kin Information
    nok_first_name = models.CharField(max_length=50)
    nok_last_name = models.CharField(max_length=50)
    nok_middle_name = models.CharField(max_length=50)
    relationship_with_nok = models.CharField(max_length=50)
    nok_nationality = models.CharField(max_length=50)
    nok_state_of_origin = models.CharField(max_length=50)
    nok_lga_of_origin = models.CharField(max_length=50)
    nok_state_of_residence = models.CharField(max_length=50)
    nok_residential_address = models.CharField(max_length=50)
    nok_email = models.EmailField(null=True,)
    nok_phone = models.PositiveIntegerField()

    activated = models.BooleanField(default=True)
    date_added = models.DateTimeField(default=timezone.now)

    class Meta:
        ordering = ['enrollee_id']

    def __str__(self):
        return f'{self.firstname} {self.lastname}'

# Consider making reminder constraints a model of it's own

# class Reminder(models.Model):

#     three_month_reminder_sent = models.BooleanField(default=False)
#     is_due_reminder_sent = models.BooleanField(default=False)
#     plan_registration = models.OneToOneField(PlanRegistration, on_delete=models.CASCADE)